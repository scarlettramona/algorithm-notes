#include <vector>
#include <stdexcept>
#include <iostream>
#include <unordered_set>

class MovingTotal
{
    // what is the sum of every three numbers and have we seen a triple that sums to whatever
    std::vector<int> buffer; // holding the previous 2
    std::unordered_set<int> sums;
public:

    void append(const std::vector<int>& list) 
    {
        for (int i = 0; i < list.size(); i++ )
        { 
            if (buffer.size() < 2)
                buffer.push_back(list[i]);
            else
            {
                int sum = buffer[0] + buffer[1] + list[i];
                sums.insert(sum);
                buffer[0] = buffer[1];
                buffer[1] = list[i];
            }
        }

    }

    bool contains(int total) 
    {
        return (sums.count(total) > 0); 
    }
};

#ifndef RunTests
int main()
{
    MovingTotal movingTotal;

    std::vector<int> first;
    first.push_back(1);
    first.push_back(2);
    first.push_back(3);
    first.push_back(4);

    movingTotal.append(first);

    std::cout << movingTotal.contains(6) << std::endl;
    std::cout << movingTotal.contains(9) << std::endl;
    std::cout << movingTotal.contains(12) << std::endl;
    std::cout << movingTotal.contains(7) << std::endl;

    std::vector<int> second;
    second.push_back(5);
    movingTotal.append(second);

    std::cout << movingTotal.contains(6) << std::endl;
    std::cout << movingTotal.contains(9) << std::endl;
    std::cout << movingTotal.contains(12) << std::endl;
    std::cout << movingTotal.contains(7) << std::endl;
}
#endif

/*
Design a data structure that can efficiently (with respect to time used) store and check if the total of any three successively added elements is equal to a given total.

For example, instantiating a MovingTotal object creates an empty container with no existing totals.

Calling append([1, 2, 3, 4]) appends elements [1, 2, 3, 4], which means that there are two existing totals: 1 + 2 + 3 = 6 and 2 + 3 + 4 = 9.

Calling append([5]) appends element 5 and creates an additional total from [3, 4, 5], resulting in the following three totals:

1 + 2 + 3 = 6

2 + 3 + 4 = 9

3 + 4 + 5 = 12

At this point:

contains(6) should return true

contains(9) should return true

contains(2) should return false



*/